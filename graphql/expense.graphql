type Expense @guard {
  id: ID!
  description: String!
  date: Date
  value: Float
  employee_name: String
  receipt_path: String
  user: User
  type: ExpenseType
  via: Via
  is_confirmed: Boolean
  confirmed_at: Date
}

input ExpenseInput {
  description: String
  expense_type_id: ID
  value: String
  expense_via_id: ID
  receipt_path: String
  date: String
}

enum QueryExpensesOrderByColumn {
  CREATED_AT @enum(value: "created_at")
}

extend type Query {
  expenses (
    orderBy: _ @orderBy(columnsEnum: "QueryExpensesOrderByColumn")
    descriptionLike: String @where(operator: "like" key: "description")
  ): [Expense]
    @paginate
    @builder(method: "App\\GraphQL\\Builders\\ExpensesBuilder")
    @canAccess(roles: ["gerencia", "atendimento"])

  expensesReport (start_date: String! final_date: String): String
    @canAccess(roles: ["gerencia"])
}

extend type Mutation {
  expenseCreate (input: ExpenseInput @spread): Expense
    @canAccess(roles: ["gerencia", "atendimento"])

  expenseUpdate(id: ID! input: ExpenseInput @spread): Expense
    @can(ability: "update" query: true)
    @canAccess(roles: ["gerencia", "atendimento"])

  expenseAssignConfirmation (id: ID! confirmation: Boolean): Expense
    @can(ability: "confirm")
    @canAccess(roles: ["gerencia"])
}
