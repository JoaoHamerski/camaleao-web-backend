type AuthUserSectorsInfo {
  orders_count: String
  sector: Sector
  next_status: Status
  quantity_count: Float
  pendency_total: Float!
}

type SectorPiecesCurrentPrevious {
  current_orders: [Order]
    @paginate(builder: "App\\GraphQL\\Builders\\SectorPiecesOrdersBuilder")
  current: Int
  previous: Int
}

type SectorPiecesDays {
  day: SectorPiecesCurrentPrevious
  week: SectorPiecesCurrentPrevious
  month: SectorPiecesCurrentPrevious
}

type SectorPieces {
  sector: Sector!
  pieces: SectorPiecesDays
}

enum OrdersBySectorOrderByColumns {
  CREATED_AT @enum(value: "created_at")
  DELIVERY_DATE @enum(value: "delivery_date")
}

extend type Query {
  authUserSectors: [AuthUserSectorsInfo]
  ordersBySector(
    sector_id: ID!
    order_by: _ @orderBy(columnsEnum: "OrdersBySectorOrderByColumns")
  ): [Order]
    @paginate(builder: "App\\GraphQL\\Builders\\OrdersBySectorBuilder")
    @can(ability: "viewSector", injectArgs: true)

  sectorsPieces: [SectorPieces] @canAccess(roles: ["gerencia"])
}

extend type Mutation {
  bankCheckDuplicatedEntries(bank_uid: [String!]!): [String!]
    @canAccess(roles: ["gerencia"])

  stepToStatus(order_id: ID!, status_id: ID!): Order
    @can(ability: "stepOrderStatus", injectArgs: true)
}
