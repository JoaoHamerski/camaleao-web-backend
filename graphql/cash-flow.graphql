type CashFlowEntry @guard {
  id: ID
  value: Float
  date: Date
  description: String
  note: String
  confirmed_at: Date
  created_at: DateTime
  employee_name: String
  receipt_path: String @field(
    resolver: "App\\GraphQL\\Resolvers\\PaymentExpenseFieldsResolver@receiptPath"
  )
  order: Order @field(
    resolver: "App\\GraphQL\\Resolvers\\PaymentExpenseFieldsResolver@order"
  )
  user: User @field(
    resolver: "App\\GraphQL\\Resolvers\\PaymentExpenseFieldsResolver@user"
  )
  via: Via @field(
    resolver: "App\\GraphQL\\Resolvers\\PaymentExpenseFieldsResolver@via"
  )
  type: ExpenseType @field(
    resolver: "App\\GraphQL\\Resolvers\\PaymentExpenseFieldsResolver@type"
  )
  is_expense: Boolean @field(
    resolver: "App\\GraphQL\\Resolvers\\PaymentExpenseFieldsResolver@isExpense"
  )
}

type CashFlowStatistics @guard {
  created_orders: Int
  created_shirts: Int
  closed_orders: Int
  closed_shirts: Int
  no_payments_orders: Int
  no_payments_shirts: Int
  balance: Float
}

input CashFlowFilterDatesInput {
  start_date: String!
  final_date: String
}

enum QueryCashFlowEntriesWhereConditionsColumn {
  DATE @enum(value: "date")
  DESCRIPTION @enum(value: "description")
}

enum QueryCashFlowEntriesOrderByColumn {
  DATE @enum(value: "date")
  CREATED_AT @enum(value: "created_at")
}

extend type Query {
  cashFlowStatistics (
    input: CashFlowFilterDatesInput! @spread
  ): CashFlowStatistics @canAccess(roles: ["gerencia"])

  cashFlowEntries (
    where: _ @whereConditions(
      columnsEnum: "QueryCashFlowEntriesWhereConditionsColumn"
      handler: "App\\GraphQL\\Handlers\\WhereCashFlowHandler"
    )
    orderBy: _ @orderBy(columnsEnum: "QueryCashFlowEntriesOrderByColumn")
  ): [CashFlowEntry]
    @paginate(builder: "App\\GraphQL\\Builders\\CashFlowEntriesBuilder")
    @canAccess(roles: ["gerencia"])
}
