union ExpensePayment = Payment | Expense

type Entry @guard {
  id: ID!
  bank_uid: String!
  value: Float!
  date: String!
  description: String
  is_canceled: Boolean
  via_id: ID
  created_at: DateTime!
  is_confirmed: Boolean
  is_tied: Boolean
}

type EntriesMonthlyBalance {
  current: Float
  previous: Float
}

type BankMirrorNav {
  via: Via!
  count: Int!
}

enum QueryWhereEntriesColumns {
  VALUE @enum(value: "value")
  DESCRIPTION @enum(value: "description")
  VIA_ID @enum(value: "via_id")
}

enum QueryWhereBankEntriesColumns {
  VIA_ID @enum(value: "via_id")
}

extend type Query {
  entries(
    where: _ @whereConditions(columnsEnum: "QueryWhereEntriesColumns")
  ): [Entry]
    @paginate
    @canAccess(roles: ["gerencia", "atendimento"])
    @where(key: "is_canceled", operator: "equals", value: false)

  entriesMonthlyBalance: EntriesMonthlyBalance
    @canAccess(roles: ["gerencia", "atendimento"])

  entriesBankMirrorNavs: [BankMirrorNav]
  entriesBankMirror(
    where: _ @whereConditions(columnsEnum: "QueryWhereBankEntriesColumns")
  ): [Entry]
    @paginate(builder: "\\App\\GraphQL\\Builders\\EntriesBankMirrorBuilder")
    @orderBy(column: "date", direction: DESC)
    @canAccess(roles: ["gerencia"])
}

extend type Mutation {
  bankMirrorEntryConfirm(id: ID!): Entry! @canAccess(roles: ["gerencia"])

  bankMirrorTiePayment(input: DailyCashInput! @spread): Entry!
    @canAccess(roles: ["gerencia"])

  bankMirrorTieExpense(input: ExpenseInput! @spread): Entry!
    @canAccess(roles: ["gerencia"])

  entryCancel(uid: ID!): Entry! @canAccess(roles: ["gerencia"])
}
