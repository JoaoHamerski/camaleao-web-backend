type SalesAmountDates {
  day: Float
  week: Float
  month: Float
}

type SalesAmount {
  current: SalesAmountDates
  previous: SalesAmountDates
}

type SalesAmountCity {
  city: City
  amount: Float
  shirts_count: Int
  orders_count: Int
}

type SalesAmountModel {
  model: Model
  amount: Float
  shirts_count: Int
  sales_percentage: Float
}

enum SalesAmountCityMonth {
  CURRENT @enum(value: "current")
  PREVIOUS @enum(value: "previous")
}

type ClientsSegmentationData {
  amount: Float
  amount_pre_registered: Float
  shirts_count: Int
  orders_count: Int
  orders_count_pre_registered: Int
}

type ClientsSegmentation {
  new_clients: ClientsSegmentationData!
  recurrent_clients: ClientsSegmentationData!
}

type DashboardProductionStatusOrdersDates {
  day: Int!
  week: Int!
  last_week: Int!
}

type DashboardProductionStatusOrdersReceipt {
  day: Float!
  week: Float!
  last_week: Float!
}

type DashboardProductionStatus {
  orders_count: DashboardProductionStatusOrdersDates!
  receipt: DashboardProductionStatusOrdersReceipt!
}

type DashboardProductionMonth {
  orders_count: Int
  receipt: Float
}

type DashboardProduction {
  estampados: DashboardProductionStatus!
  costurados: DashboardProductionStatus!
  month_production: DashboardProductionMonth!
  late_orders: Int
  waiting_for_withdrawal_orders: Int
}

extend type Query {
  dashboardSalesAmount: SalesAmount @canAccess(roles: ["GERENCIA"])
  dashboardSalesAmountCities(month: SalesAmountCityMonth): [SalesAmountCity]
    @canAccess(roles: ["GERENCIA"])
  dashboardSalesAmountModels: [SalesAmountModel] @canAccess(roles: ["GERENCIA"])
  dashboardClientsSegmentation: ClientsSegmentation!
    @canAccess(roles: ["GERENCIA"])
  dashboardProduction: DashboardProduction @canAccess(roles: ["GERENCIA"])
}
