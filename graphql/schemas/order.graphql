type Order @guard {
  id: ID!
  code: String
  client: Client @belongsTo
  status: Status @belongsTo
  name: String
  quantity: Int
  price: Float
  delivery_date: Date
  print_date: Date
  seam_date: Date
  discount: Float
  shipping_value: Float
  total_paid_sponsor: Float
  total_paid_non_sponsor: Float
  has_sponsor: Boolean
  order: Int
  payments: [Payment]
    @hasMany
    @orderBy(column: "date", direction: DESC)
    @orderBy(column: "created_at", direction: DESC)

  clothing_types: [ClothingType] @rename(attribute: "clothingTypes")

  art_paths: [String]
  size_paths: [String]
  payment_voucher_paths: [String]
  total_clothings_value: Float
  total_paid: Float
  total_owing: Float
  notes: [Note]
    @hasMany
    @orderBy(column: "created_at", direction: DESC)
    @builder(method: "\\App\\GraphQL\\Builders\\NotesOrderBuilder")

  reminder: String
  concluded_status: [Status] @rename(attribute: "concludedStatus")
  has_order_control: Boolean
  final_status: String
  original_price: Float
  states: [String]
  created_at: DateTime
  updated_at: DateTime
  closed_at: Date
  is_concluded: Boolean
  can_be_concluded: Boolean
  garments: [Garment!]!
  has_individual_names: Boolean
}

enum QueryOrdersOrderByColumn {
  CREATED_AT @enum(value: "created_at")
  DELIVERY_DATE @enum(value: "delivery_date")
  SEAM_DATE @enum(value: "seam_date")
}

enum QueryOrdersWhereConditionsColumn {
  PRICE @enum(value: "price")
  CODE @enum(value: "code")
  STATUS_ID @enum(value: "status_id")
  CLOSED_AT @enum(value: "closed_at")
  DELIVERY_DATE @enum(value: "delivery_date")
  QUANTITY @enum(value: "quantity")
  CLIENT_ID @enum(value: "client_id")
}

input ClothingTypesInput {
  key: String!
  value: String!
  quantity: String!
}

input OrderGarmentItemInput {
  quantity: String
  size_id: ID
}

input OrderGarmentIndItemInput {
  name: String
  number: String
  size_id: ID
}

input OrderGarmentsInput {
  individual_names: Boolean
  items: [OrderGarmentItemInput!]!
  items_individual: [OrderGarmentIndItemInput!]!
  match_id: ID
  model_id: ID
  material_id: ID
  neck_type_id: ID
  sleeve_type_id: ID
}

input OrderInput {
  client_id: ID
  name: String
  code: ID
  discount: String
  shipping_value: String
  payment_via_id: ID
  delivery_date: String
  clothing_types: [ClothingTypesInput]
  status_id: ID
  art_paths: [String!]
  size_paths: [String!]
  payment_voucher_paths: [String!]
  garments: [OrderGarmentsInput!]!
}

enum OrderReportInputOrder {
  OLDER @enum(value: "older")
  NEWER @enum(value: "newer")
  DELIVERY_DATE @enum(value: "delivery_date")
}

enum OrderReportInputState {
  OPEN @enum(value: "open")
  ALL @enum(value: "all")
}

enum OrdersHasClientColumns {
  CITY_ID @enum(value: "city_id")
}

enum OrderHasPaymentsColumns {
  IS_CONFIRMED @enum(value: "is_confirmed")
  VALUE @enum(value: "value")
}

input OrdersReportInput {
  city_id: ID
  status_id: [ID]
  closed_at: String
  delivery_date: String
  display_filter_info: Boolean
  payment_pending: Boolean
  payment_paid: Boolean
  order: OrderReportInputOrder!
  state: OrderReportInputState!
}

input OrdersReportPrintDateInput {
  date: String!
  state: OrderReportInputState!
}

input OrdersWeeklyCalendarReport {
  field: QueryFromDateColumns!
  date: String!
  status_id: ID
}

enum OrdersSizesReportGroupsEnum {
  MODEL @enum(value: "model")
  MATERIAL @enum(value: "material")
  NECK_TYPE @enum(value: "neck_type")
  SLEEVE_TYPE @enum(value: "sleeve_type")
}

input OrdersSizesReportInput {
  initial_date: String
  final_date: String
  groups: [OrdersSizesReportGroupsEnum]
  indicators: Boolean
  start_status_to_ignore: ID
}

extend type Query {
  order(id: ID! @eq, client_id: ID): Order
    @find
    @can(ability: "view", injectArgs: true, query: true)
    @canAccess(roles: ["gerencia", "atendimento"])

  orders(
    hasClient: _ @whereHasConditions(columnsEnum: "OrdersHasClientColumns")
    hasPayments: _ @whereHasConditions(columnsEnum: "OrderHasPaymentsColumns")
    orderBy: _ @orderBy(columnsEnum: "QueryOrdersOrderByColumn")
    where: _ @whereConditions(columnsEnum: "QueryOrdersWhereConditionsColumn")
  ): [Order!] @paginate @canAccess(roles: ["gerencia", "atendimento"])

  orderReport(id: ID!): String @canAccess(roles: ["gerencia", "atendimento"])

  ordersReport(input: OrdersReportInput! @spread): String
    @canAccess(roles: ["gerencia", "atendimento"])

  ordersReportPrintDate(input: OrdersReportPrintDateInput! @spread): String
    @canAccess(roles: ["gerencia", "atendimento"])

  ordersWeeklyCalendarReport(
    input: OrdersWeeklyCalendarReport! @spread
  ): String
    @canAccess(
      roles: ["gerencia", "atendimento", "design", "costura", "estampa"]
    )

  ordersSizesReport(input: OrdersSizesReportInput! @spread): String
    @canAccess(roles: ["gerencia", "atendimento"])

  ordersActivities(id: ID!): [Activity] @canAccess(roles: ["gerencia"])
}

extend type Mutation {
  orderCreate(client_id: ID!, input: OrderInput! @spread): Order
    @canAccess(roles: ["gerencia", "atendimento"])

  orderUpdate(id: ID! @eq, input: OrderInput! @spread): Order
    @can(ability: "update", query: true)
    @canAccess(roles: ["gerencia", "atendimento"])

  orderUpdateStatus(id: ID! @eq, status_id: ID!): Order
    @can(ability: "update", query: true)
    @canAccess(roles: ["gerencia", "atendimento"])

  orderToggle(id: ID! @eq): Order @canAccess(roles: ["gerencia", "atendimento"])

  orderDelete(id: ID! @eq): Order @canAccess(roles: ["gerencia", "atendimento"])
}
