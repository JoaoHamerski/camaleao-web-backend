type AuthUserSectorsInfo {
  orders_count: String
  sector: Sector
  next_status: Status
  quantity_count: Float @canAccess(roles: ["gerencia"])
  pendency_total: Float @canAccess(roles: ["gerencia"])
}

type SectorOrders {
  current_orders: [Order]
    @paginate(builder: "App\\GraphQL\\Builders\\SectorOrdersByPeriodBuilder")
  current_count: Int
  previous_count: Int
}

type SectorOrdersOnPeriods {
  day: SectorOrders
  week: SectorOrders
  month: SectorOrders
}

type SectorData {
  sector: Sector!
  orders_on_periods: SectorOrdersOnPeriods
}

enum OrdersBySectorOrderByColumns {
  CREATED_AT @enum(value: "created_at")
  DELIVERY_DATE @enum(value: "delivery_date")
}

extend type Query {
  authUserSectors: [AuthUserSectorsInfo]
  ordersBySector(
    sector_id: ID!
    order_by: _ @orderBy(columnsEnum: "OrdersBySectorOrderByColumns")
  ): [Order]
    @paginate(builder: "App\\GraphQL\\Builders\\OrdersBySectorBuilder")
    @can(ability: "viewSector", injectArgs: true)

  productionPanel: [SectorData] @canAccess(roles: ["gerencia"])
}

extend type Mutation {
  bankCheckDuplicatedEntries(bank_uid: [String!]!): [String!]
    @canAccess(roles: ["gerencia"])

  stepToStatus(
    order_id: ID!
    status_id: ID!
    override_option: OrderUpdateStatusOverrideOptions
  ): Order @can(ability: "stepOrderStatus", injectArgs: true)
}
