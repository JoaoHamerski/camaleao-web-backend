type User @guard {
  id: ID!
  name: String!
  email: String!
  email_verified_at: DateTime
  created_at: DateTime!
  updated_at: DateTime!
  role: Role!
}

input UserInput {
  name: String!
  email: String!
  password: String!
  password_confirmation: String!
  role_id: ID!
}

extend type Query {
  user(
    id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])
    email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
  ): User
    @find
    @canAccess(roles: ["gerencia"])

  users: [User]!
    @all
    @canAccess(roles: ["gerencia"])
}

extend type Mutation {
  userCreate (input: UserInput! @spread): User
    @can(ability: "create")
    @canAccess(roles: ["gerencia"])

  userChangeRole (id: ID! @eq new_role_id: Int): User
    @can(ability: "changeRole" query: true)
    @canAccess(roles: ["gerencia"])

  userDelete(id: ID! @eq auth_password: String!): User
    @can(ability: "delete" query: true)
    @canAccess(roles: ["gerencia"])
}
