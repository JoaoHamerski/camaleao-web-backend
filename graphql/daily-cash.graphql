type DailyCash @guard {
  id: ID
  value: Float
  date: Date
  description: String
  note: String
  confirmed_at: Date
  is_confirmed: Boolean
  created_at: DateTime
  employee_name: String
  receipt_path: String @field(
    resolver: "App\\GraphQL\\Resolvers\\PaymentExpenseFieldsResolver@receiptPath"
  )
  order: Order @field(
    resolver: "App\\GraphQL\\Resolvers\\PaymentExpenseFieldsResolver@order"
  )
  user: User @field(
    resolver: "App\\GraphQL\\Resolvers\\PaymentExpenseFieldsResolver@user"
  )
  via: Via @field(
    resolver: "App\\GraphQL\\Resolvers\\PaymentExpenseFieldsResolver@via"
  )
  type: ExpenseType @field(
    resolver: "App\\GraphQL\\Resolvers\\PaymentExpenseFieldsResolver@type"
  )
  is_expense: Boolean @field(
    resolver: "App\\GraphQL\\Resolvers\\PaymentExpenseFieldsResolver@isExpense"
  )
}

type DailyCashPendencies @guard {
  created_at_entry: Date!
  total: Int!
}

type BalanceData @guard {
  entry: Float!
  out: Float!
  balance: Float!
}

type DailyCashBalance @guard {
  balance_of_day: BalanceData!
  balance_of_week: BalanceData!
  balance_of_month: BalanceData!
}

enum QueryDailyCashOrderByColumn {
  CREATED_AT @enum(value: "created_at")
}

enum QueryDailyCashWhereColumn {
  IS_CONFIRMED @enum(value: "is_confirmed")
}

extend type Query {
  dailyCash (
    where: _ @whereConditions(columnsEnum: "QueryDailyCashWhereColumn")
    orderBy: _ @orderBy(columnsEnum: "QueryDailyCashOrderByColumn")
    created_at: String @where(clause: "whereDate")
  ): [DailyCash]
    @paginate(builder: "App\\GraphQL\\Builders\\DailyCashEntriesBuilder")
    @canAccess(roles: ["gerencia", "atendimento"])

  dailyCashPendencies: [DailyCashPendencies]
    @canAccess(roles: ["gerencia", "atendimento"])

  dailyCashBalance: DailyCashBalance!
    @canAccess(roles: ["gerencia"])
}
