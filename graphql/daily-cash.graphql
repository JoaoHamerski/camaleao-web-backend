type DailyCashPendencies @guard {
  created_at_entry: Date!
  total: Int!
}

type BalanceData @guard {
  entry: Float!
  out: Float!
  balance: Float!
}

type DailyCashPendency {
  total_owing_on_month: Float
  total_owing_last_month: Float
  total_shirts_on_month: Float
  total_shirts_last_month: Float
}

type DailyCashBalance @guard {
  balance_of_day: BalanceData!
  balance_of_week: BalanceData!
  balance_of_month: BalanceData!
  pendency: DailyCashPendency!
}

enum QueryDailyCashOrderByColumn {
  CREATED_AT @enum(value: "created_at")
}

enum QueryDailyCashWhereColumn {
  IS_CONFIRMED @enum(value: "is_confirmed")
}
enum DailyCashBalanceMonthsEnum {
  CURRENT @enum(value: "current")
  LAST @enum(value: "last")
}

enum DailyCashBalancePendenciesOrderByColumns {
  PRINT_DATE @enum(value: "print_date")
}

extend type Query {
  dailyCash (
    where: _ @whereConditions(columnsEnum: "QueryDailyCashWhereColumn")
    orderBy: _ @orderBy(columnsEnum: "QueryDailyCashOrderByColumn")
    created_at: String @where(clause: "whereDate")
  ): [PaymentExpense]
    @paginate(builder: "App\\GraphQL\\Builders\\DailyCashEntriesBuilder")
    @canAccess(roles: ["gerencia", "atendimento"])

  dailyCashPendencies: [DailyCashPendencies]
    @canAccess(roles: ["gerencia", "atendimento"])

  dailyCashBalance: DailyCashBalance!
    @canAccess(roles: ["gerencia"])

  dailyCashBalancePendenciesOrders (
    month: DailyCashBalanceMonthsEnum!
    orderBy: _ @orderBy(columnsEnum: "DailyCashBalancePendenciesOrderByColumns")
  ): [Order]
    @paginate(builder: "App\\GraphQL\\Builders\\DailyCashBalancePendenciesOrdersBuilder")
    @canAccess(roles: ["gerencia"])
}
